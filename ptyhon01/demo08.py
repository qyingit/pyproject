#函数
# 函数也是一个对象
#对象是内存中存储数据的区域
#比如有如下三行代码,是一个完整的功能
#函数可以用来保存一些可执行代码，可以在需要的时候，对这些语句进行复用
#创建函数: def  函数名（[形参，形参]）

def fn():
    print("hehe")
    print("天气好")

#调用函数
print(type(fn))

#调用函数 fn
fn()
#定义函数一般要实现某种功能的

#定义函数用来求两个函数的和(可以包含字母数字下划线)

def sum(a,b):
    print(a+b)

#形参相当于在函数内部生命变量，但是没有赋值
sum(1,3)
#实参（实际参数）
#如果函数定义的时候，制定了形参，哪个在函数调用的时候必须传递实参
#简单说有几个形参就穿几个实参

sum(10,29)

def multi(a,b,c=20):
    print(a*b*c)
multi(10,2,40)

#定义形参时可以指定默认值，指定了默认值如果用户传递参数，就不生效，否则生效
multi(10,2)

#实参的传递方式
#位置参数
# #位置就是将对应位置的实参赋值给对应位置的形参
#即:第一个参数给1个形参，二给第二个参数的形参
# 关键自参数，可以不按照顺序去穿，而是直接根据参数名进行传递
def fn1(a , b):
    print(a,b)
fn1(b=2,a=1)

#混合使用位置参数与关键自参数，则位置参数应该在前面



#函数在调用的时候，解析器不会检查实参的类型
#实参可以传递任意类型的对象


def fn4(a):
    #在函数中对形参进行重新赋值不会影响其它的变量
    #a是一个列表,尝试修改列表中的元素，会影响该变量的对象，可以使用copy保证对象不变
    a[0] =  20
    print("a=",a)

c=10
c=[1,2,3]
fn4(c)


print("c=",c)



#带星号的形参只能有一个，可以和其它参数配合使用，第一个参数给a，第二个参数给b，
# 剩下的所有参数给c
def fun3(*c):
    j = 0
    for i in c:
        j+=i
    print(j)
fun3(1,2,3,4,5)


#可变参数不是必须在最后面，但是注意，
# 带*的参数后所有的参数，必须以关键字的形式传递
def fn2(a,*b,c=1):
    print("a=",a)
    print("b=",b)
    print("c=",c)
fn2(1,2,3,4,5,c=2)
#所有的位置参数给a，b和c必须使用关键字参数

def fn2(*a,b,c=1):
    print("a=",a)
    print("b=",b)
    print("c=",c)
fn2(1,2,3,b=4,c=5)


#如果在形参的开头直接写一个*，则要求我们所有的参数必须以关键字参数的形式传递
def fn2(*,a,b,c=1):
    print("a=",a)
    print("b=",b)
    print("c=",c)
fn2(a=1,b=2,c=3)

# *形参只能接受位置参数，而不能接受关键字参数，需要使用**
# **形参可以接收其它的关键字参数,他会将这些参数同意保存在一个字典中
# 字典的key就是参数的名字，字典的value就是参数的值
#**参只能卸载最后

#总结 *号处理位置参数  **号处理关键字参数
def fn3(**a):
    print("a=",a)
fn3(a=1,b=2,c=3)

#参数的解包
def fn4(a,b,c):
    print("a=",a)
    print("b=",b)
    print("c=",c)

t = (10,20,30)
#传递实参时，可以在序列类型的参数前加星号，这样他会自动的将序列中的元素解包
fn4(*t)

#这里要求序列中元素的个数与形参的个数一致

#创建一个字典
d = {"a":100,"b":200,"c":300}
fn4(**d)

#返回值
def sum(*a):
    re =0;
    for i in a:
        re+=i
    print(re)
    return re
a = sum(1,2,3)
print(a)
#返回值,返回值是函数执以后返回的结果，
# 可以通过一个变量来接受函数的返回值
# return 后面跟什么值,函数就会返回什么值
# return 后边可以跟任意的对象,返回值也可以是一个函数

def  fn():
    a=1
    def fn2(a):
        print(a)
    return fn2(a)
f = fn()

#如果仅仅写一个return或者不写return相当于return None


#return后面的代码都不会执行，return一旦执行函数自动结束

def fn4():
    for i in range(0,6):
        if i==3:
            break
            #break跳出本次循环，return结束函数 continue跳出档次循环
        print(i)
    print("结束")
fn4()


def fn5():
    return 10
print(fn5)  #fn5势函数对象   fn5()是调用函数
print(fn5())

